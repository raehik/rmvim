#!/bin/bash
#	"\."	: needed because of how find prints files ('\' escapes '.')
#	"/"	: needed because of how find prints files
#	".+"	: file must have at least 1 character other than '~'
#		  (i.e. '~' will not match, but "~~" will
#	"~$"	: tilde at the end of the file name
IFS=$'\n'
file_count=0
removed_count=0

while getopts "frv" opt; do
	case $opt in
		f) # force, no prompt
			is_force=true
			is_verbose=true
			;;
		r) # recursive
			is_recursive=true
			;;
		v) # verbose
			is_verbose=true
	esac			
done

shift $((OPTIND-1))
if [ $1 ]; then
        cd $1 || exit 1
fi


if [ $is_recursive ]; then
	tilde_files="`find . -mindepth 1 -type f -regex "\./.+~$"`"
else
	tilde_files="`find . -maxdepth 1 -mindepth 1 -type f -regex "\./.+~$"`"
fi

if [[ -z "$tilde_files" ]]; then # if is null (none found)
	echo "No ~ files found."
	exit 1
fi

for file in `echo "$tilde_files"`; do	# for some reason `echo $foo` is
					# necessary for the IFS to do things
	file_count=$((file_count+1))
	if [ ! $is_force ]; then
		read -p "rmvim: remove ‘$file’? " yn
	fi

	if [[ $yn == 'y' ]] || [ $is_force ]; then
		removed_count=$((removed_count+1))
		rm "$file"
		exit_code=$?
	fi

	if [ $is_verbose ]; then
		if [[ $yn == 'y' ]] || [ $is_force ]; then
			if [ $exit_code -eq 0 ]; then
				echo "removed ‘$file’"
			fi
		fi
	fi
done

echo "~ files found: $file_count"
echo "~ files removed: $removed_count"
