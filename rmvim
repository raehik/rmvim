#!/usr/bin/env bash
#
# Remove Vim backup files ("*~").
#
#	"\."	: needed because of how find prints files ('\' escapes '.')
#	"/"	: needed because of how find prints files
#	".+"	: file must have at least 1 character other than '~'
#		  (i.e. '~' will not match, but "~~" will
#	"~$"	: tilde at the end of the file name
#

usage() {
    cat <<EOF
Usage: ${0##*/} [options] [directory]

${0##*/} exits successfully if it finds no files to remove.
If [directory] is present, ${0##*/} will start from it.

  Options:
    -f              force remove without prompting
    -r              recurse through directories
    -v              be verbose (show files removed)
    -h              display this help message
EOF
}

# TODO: this is super unneat:
#           - use `rm -v` instead of my own dumb shit
#           - space it out a little
#           - num_files and num_removed should be their own option (-c count)
#           - later, fix find and stuff to remove -any- file, including ones
#             with newlines in - if not possible, fine

IFS=$'\n'
num_files=0
num_removed=0

while getopts "frvh" opt; do
	case $opt in
		f) # force, no prompt
			is_force=true
			is_verbose=true
			;;
		r) # recurse through directories
			is_recursive=true
			;;
		v) # be verbose
		 	is_verbose=true
            ;;
        h) # display usage message
            usage
            exit 0
            ;;
	esac			
done

shift $((OPTIND-1))
if [ $1 ]; then
        cd $1
fi

if [ $is_recursive ]; then
	tilde_files="`find . -mindepth 1 -type f -regex "\./.+~$"`"
else
	tilde_files="`find . -maxdepth 1 -mindepth 1 -type f -regex "\./.+~$"`"
fi

if [[ -z "$tilde_files" ]]; then
	echo "${0##*/}: no ~ files found"
	exit 0
fi



for file in `echo "$tilde_files"`; do
    # IFS requires `echo $foo` for whatever reason to work
	num_files=$((num_files+1))
	if [ ! $is_force ]; then
		read -p "${0##*/}: remove ‘$file’? " yn
	fi

	if [[ $yn == 'y' ]] || [ $is_force ]; then
		rm "$file"
		if [ $? -eq 0 ]; then
			num_removed=$((num_removed+1))
			if [ $is_verbose ]; then
				echo "${0##*/}: removed ‘$file’"
			fi
		fi
	fi
done

if [ $is_verbose ]; then
    echo "${0##*/}: ~ files found: $num_files"
    echo "${0##*/}: ~  files removed: $num_removed"
fi
